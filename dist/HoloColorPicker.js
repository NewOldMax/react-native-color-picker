var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import React from "react";
import { I18nManager, Image, InteractionManager, StyleSheet, TouchableOpacity, View, } from "react-native";
import tinycolor from "tinycolor2";
import Slider from "@react-native-community/slider";
import { createPanResponder } from "./utils";
var HoloColorPicker = /** @class */ (function (_super) {
    __extends(HoloColorPicker, _super);
    function HoloColorPicker(props, ctx) {
        var _this = _super.call(this, props, ctx) || this;
        _this._handleColorChange = function (_a) {
            var x = _a.x, y = _a.y;
            var _b = _this._getColor(), s = _b.s, v = _b.v;
            var marginLeft = (_this._layout.width - _this.state.pickerSize) / 2;
            var marginTop = (_this._layout.height - _this.state.pickerSize) / 2;
            var relativeX = x - _this._pageX - marginLeft;
            var relativeY = y - _this._pageY - marginTop;
            var h = _this._computeHValue(relativeX, relativeY);
            _this._onColorChange({ h: h, s: s, v: v });
            return true;
        };
        var state = {
            color: { h: 0, s: 1, v: 1 },
            pickerSize: null,
        };
        if (props.oldColor) {
            state.color = tinycolor(props.oldColor).toHsv();
        }
        if (props.defaultColor) {
            state.color = tinycolor(props.defaultColor).toHsv();
        }
        _this.state = state;
        _this._layout = { width: 0, height: 0, x: 0, y: 0 };
        _this._pageX = 0;
        _this._pageY = 0;
        _this._onLayout = _this._onLayout.bind(_this);
        _this._onSValueChange = _this._onSValueChange.bind(_this);
        _this._onVValueChange = _this._onVValueChange.bind(_this);
        _this._onColorSelected = _this._onColorSelected.bind(_this);
        _this._onOldColorSelected = _this._onOldColorSelected.bind(_this);
        _this._isRTL = I18nManager.isRTL;
        _this._pickerResponder = createPanResponder({
            onStart: _this._handleColorChange,
            onMove: _this._handleColorChange,
        });
        return _this;
    }
    HoloColorPicker.prototype._getColor = function () {
        var passedColor = typeof this.props.color === "string"
            ? tinycolor(this.props.color).toHsv()
            : this.props.color;
        return passedColor || this.state.color;
    };
    HoloColorPicker.prototype._onColorSelected = function () {
        var onColorSelected = this.props.onColorSelected;
        var color = tinycolor(this._getColor()).toHexString();
        onColorSelected && onColorSelected(color);
    };
    HoloColorPicker.prototype._onOldColorSelected = function () {
        var _a = this.props, oldColor = _a.oldColor, onOldColorSelected = _a.onOldColorSelected;
        var color = tinycolor(oldColor);
        this.setState({ color: color.toHsv() });
        onOldColorSelected && onOldColorSelected(color.toHexString());
    };
    HoloColorPicker.prototype._onSValueChange = function (s) {
        var _a = this._getColor(), h = _a.h, v = _a.v;
        this._onColorChange({ h: h, s: s, v: v });
    };
    HoloColorPicker.prototype._onVValueChange = function (v) {
        var _a = this._getColor(), h = _a.h, s = _a.s;
        this._onColorChange({ h: h, s: s, v: v });
    };
    HoloColorPicker.prototype._onColorChange = function (color) {
        this.setState({ color: color });
        if (this.props.onColorChange) {
            this.props.onColorChange(color);
        }
    };
    HoloColorPicker.prototype._onLayout = function (l) {
        var _this = this;
        this._layout = l.nativeEvent.layout;
        var _a = this._layout, width = _a.width, height = _a.height;
        var pickerSize = Math.min(width, height);
        if (this.state.pickerSize !== pickerSize) {
            this.setState({ pickerSize: pickerSize });
        }
        // layout.x, layout.y is always 0
        // we always measure because layout is the same even though picker is moved on the page
        InteractionManager.runAfterInteractions(function () {
            // measure only after (possible) animation ended
            _this.refs.pickerContainer &&
                _this.refs.pickerContainer.measure(function (x, y, width, height, pageX, pageY) {
                    // picker position in the screen
                    _this._pageX = pageX;
                    _this._pageY = pageY;
                });
        });
    };
    HoloColorPicker.prototype._computeHValue = function (x, y) {
        var mx = this.state.pickerSize / 2;
        var my = this.state.pickerSize / 2;
        var dx = x - mx;
        var dy = y - my;
        var rad = Math.atan2(dx, dy) + Math.PI + Math.PI / 2;
        return ((rad * 180) / Math.PI) % 360;
    };
    HoloColorPicker.prototype._hValueToRad = function (deg) {
        var rad = (deg * Math.PI) / 180;
        return rad - Math.PI - Math.PI / 2;
    };
    HoloColorPicker.prototype._getSlider = function () {
        if (this.props.hideSliders) {
            return undefined;
        }
        if (this.props.sliderComponent) {
            return this.props.sliderComponent;
        }
        if (!Slider) {
            throw new Error("You need to install `@react-native-community/slider` and pass it (or any other Slider compatible component) as `sliderComponent` prop");
        }
        return Slider;
    };
    HoloColorPicker.prototype.getColor = function () {
        return tinycolor(this._getColor()).toHexString();
    };
    HoloColorPicker.prototype.render = function () {
        var pickerSize = this.state.pickerSize;
        var _a = this.props, oldColor = _a.oldColor, style = _a.style;
        var color = this._getColor();
        var h = color.h, s = color.s, v = color.v;
        var angle = this._hValueToRad(h);
        var selectedColor = tinycolor(color).toHexString();
        var indicatorColor = tinycolor({ h: h, s: 1, v: 1 }).toHexString();
        var computed = makeComputedStyles({
            pickerSize: pickerSize,
            selectedColor: selectedColor,
            indicatorColor: indicatorColor,
            oldColor: oldColor,
            angle: angle,
            isRTL: this._isRTL,
        });
        var SliderComp = this._getSlider();
        return (<View style={style}>
        <View onLayout={this._onLayout} ref="pickerContainer" style={styles.pickerContainer}>
          {!pickerSize ? null : (<View>
              <View {...this._pickerResponder.panHandlers} style={[computed.picker]} collapsable={false}>
                <Image source={require("../resources/color-circle.png")} resizeMode="contain" style={[styles.pickerImage]}/>
                <View style={[styles.pickerIndicator, computed.pickerIndicator]}/>
              </View>
              {oldColor && (<TouchableOpacity style={[styles.selectedPreview, computed.selectedPreview]} onPress={this._onColorSelected} activeOpacity={0.7}/>)}
              {oldColor && (<TouchableOpacity style={[styles.originalPreview, computed.originalPreview]} onPress={this._onOldColorSelected} activeOpacity={0.7}/>)}
              {!oldColor && (<TouchableOpacity style={[
            styles.selectedFullPreview,
            computed.selectedFullPreview,
        ]} onPress={this._onColorSelected} activeOpacity={0.7}/>)}
            </View>)}
        </View>
        {this.props.hideSliders ? null : (<View>
            <SliderComp value={s} onValueChange={this._onSValueChange}/>
            <SliderComp value={v} onValueChange={this._onVValueChange}/>
          </View>)}
      </View>);
    };
    return HoloColorPicker;
}(React.PureComponent));
export { HoloColorPicker };
var makeComputedStyles = function (_a) {
    var _b;
    var indicatorColor = _a.indicatorColor, selectedColor = _a.selectedColor, oldColor = _a.oldColor, angle = _a.angle, pickerSize = _a.pickerSize, isRTL = _a.isRTL;
    var summarySize = 0.5 * pickerSize;
    var indicatorPickerRatio = 42 / 510; // computed from picker image
    var indicatorSize = indicatorPickerRatio * pickerSize;
    var pickerPadding = indicatorSize / 3;
    var indicatorRadius = pickerSize / 2 - indicatorSize / 2 - pickerPadding;
    var mx = pickerSize / 2;
    var my = pickerSize / 2;
    var dx = Math.cos(angle) * indicatorRadius;
    var dy = Math.sin(angle) * indicatorRadius;
    return {
        picker: {
            padding: pickerPadding,
            width: pickerSize,
            height: pickerSize,
        },
        pickerIndicator: (_b = {
                top: mx + dx - indicatorSize / 2
            },
            _b[isRTL ? "right" : "left"] = my + dy - indicatorSize / 2,
            _b.width = indicatorSize,
            _b.height = indicatorSize,
            _b.borderRadius = indicatorSize / 2,
            _b.backgroundColor = indicatorColor,
            _b),
        selectedPreview: {
            width: summarySize / 2,
            height: summarySize,
            top: pickerSize / 2 - summarySize / 2,
            left: Math.floor(pickerSize / 2),
            borderTopRightRadius: summarySize / 2,
            borderBottomRightRadius: summarySize / 2,
            backgroundColor: selectedColor,
        },
        originalPreview: {
            width: Math.ceil(summarySize / 2),
            height: summarySize,
            top: pickerSize / 2 - summarySize / 2,
            left: pickerSize / 2 - summarySize / 2,
            borderTopLeftRadius: summarySize / 2,
            borderBottomLeftRadius: summarySize / 2,
            backgroundColor: oldColor,
        },
        selectedFullPreview: {
            width: summarySize,
            height: summarySize,
            top: pickerSize / 2 - summarySize / 2,
            left: pickerSize / 2 - summarySize / 2,
            borderRadius: summarySize / 2,
            backgroundColor: selectedColor,
        },
    };
};
var styles = StyleSheet.create({
    pickerContainer: {
        flex: 1,
        alignItems: "center",
        justifyContent: "center",
    },
    pickerImage: {
        flex: 1,
        width: null,
        height: null,
    },
    pickerIndicator: {
        position: "absolute",
        // Shadow only works on iOS.
        shadowColor: "black",
        shadowOpacity: 0.3,
        shadowOffset: { width: 3, height: 3 },
        shadowRadius: 4,
        // This will elevate the view on Android, causing shadow to be drawn.
        elevation: 5,
    },
    selectedPreview: {
        position: "absolute",
        borderLeftWidth: 0,
    },
    originalPreview: {
        position: "absolute",
        borderRightWidth: 0,
    },
    selectedFullPreview: {
        position: "absolute",
    },
    pickerAlignment: {
        alignItems: "center",
    },
});
//# sourceMappingURL=data:application/json;base64,